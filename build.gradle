
apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'io.github.alleriawindrunner'
version = '1.0.0-SNAPSHOT'


repositories {
    maven {
        url "http://maven.aliyun.com/nexus/content/groups/public/"
    }
    maven { url "https://oss.sonatype.org/service/local/staging/deploy/maven2"}
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    mavenLocal()
    mavenCentral()
}
configurations {
    provided
    compile.extendsFrom(provided)
}

dependencies {
    testCompile 'junit:junit:4.12'
    compile 'org.slf4j:slf4j-api:1.7.30'
    testCompile 'org.slf4j:slf4j-simple:1.7.5'
    compile ('org.projectlombok:lombok:1.18.6')
    annotationProcessor ('org.projectlombok:lombok:1.18.6')
    testCompile ('org.projectlombok:lombok:1.18.6')
    testAnnotationProcessor ('org.projectlombok:lombok:1.18.6')
    compile "com.fasterxml.jackson.core:jackson-core:2.9.6"
    compile "com.fasterxml.jackson.core:jackson-databind:2.9.6"
    compile "com.fasterxml.jackson.core:jackson-annotations:2.9.6"
    compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.60'
    compile group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.60'
    compile 'org.web3j:core:3.4.0'
}


configurations {
    all {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}


sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources  {
            srcDir 'src/main/resources'
        }
    }
}
javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}
jar {
    enabled = true
    destinationDir file('dist')
    archiveName project.name + '.jar'
    exclude '**/*.xml'
    exclude '**/*.properties'
    exclude '**/*.yml'
   // from configurations.provided.files.collect { it.getName().contains("key-mini-toolkit")?zipTree(it):null}

    doLast {
        copy {
            from file('src/main/resources/')
            into 'dist/config'
        }
        copy {
            from configurations.runtime
            into 'dist/lib'
        }
    }
}
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}